# -*- coding: utf-8 -*-
"""solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WFJXp9n-nbdMA91kJV6xO8meI_oer_4c



""" Challenge 2.2. Loop """

## Base conversion and frequency count
def num_str(dig, base = 2):                    # Works for base in [2, 10]
    num_base_str = [ ]
    while dig > 0:
        num_base_str.append(str(dig % base))
        dig //= base
    num_base_str = "".join(num_base_str[::-1])
    return num_base_str

def solution(n, b):
    k = len(n);    frequency = { };    tolerance = 5      # frequency tolerance for cycling
    while 1:
        frequency[n] = frequency[n] + 1 if n in frequency else 1
        if frequency[n] > tolerance:
            cycle = [m for m in frequency.keys() if frequency[m] > tolerance - 1]
            return len(cycle)
        
        ## Else continue
        x = int("".join(sorted(n)[::-1]), b);   y = int("".join(sorted(n)), b)
        z = num_str(x - y, base = b)
        n = "0" * (k - len(z)) + z if (len(z) < k) else z
    ## End of loop ##

# Commented out IPython magic to ensure Python compatibility.
## Examples...
# %time print("Cycle length = ", solution(n = "1211", b = 10))
# %time print("Cycle length = ", solution(n = "210022", b = 3))